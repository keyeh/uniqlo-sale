{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","products","filterBySize","ctx","fetch","then","response","json","setState","variant","react_default","a","createElement","Grid_default","item","sm","md","lg","href","url","target","rel","Card_default","style","height","display","flexDirection","width","src","thumbnail","alt","name","CardContent_default","flexGrow","Typography_default","stock","map","s","inStock","size","CardActions_default","product","title","originalPrice","salePrice","variants","percentDiscount","Number","replace","Math","round","container","spacing","renderVariants","_this2","p","objectSpread","filter","v","toUpperCase","length","reduce","acc","_this3","filtered","className","FormControl_default","InputLabel_default","htmlFor","Input_default","onChange","e","value","countVariants","renderProduct","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAuHeA,cA3Gb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAU,GACVC,aAAc,KALCT,oFASjB,IAAMU,EAAMP,KACZQ,MACE,8EAECC,KAAK,SAASC,GACb,OAAOA,EAASC,SAEjBF,KAAK,SAASE,GACbJ,EAAIK,SAAS,CAAEP,SAAUM,6CAGhBE,GACb,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC3BP,EAAAC,EAAAC,cAAA,KAAGM,KAAMT,EAAQU,IAAKC,OAAO,SAASC,IAAI,uBACxCX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEY,MAAO,CACLC,OAAQ,OACRC,QAAS,OACTC,cAAe,WAGjBhB,EAAAC,EAAAC,cAAA,OACEW,MAAO,CAAEI,MAAO,QAChBC,IAAKnB,EAAQoB,UACbC,IAAKrB,EAAQsB,OAEfrB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAaY,MAAO,CAAEU,SAAU,IAC9BvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,KAAaF,EAAQsB,MACrBrB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,KACGF,EAAQ0B,MAAMC,IACb,SAAAC,GAAC,OAAIA,GAAKA,EAAEC,SAAW5B,EAAAC,EAAAC,cAAA,YAAOyB,EAAEE,KAAT,gBAI7B7B,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,+CAOI8B,GAAS,IACbC,EAA8CD,EAA9CC,MAAOC,EAAuCF,EAAvCE,cAAeC,EAAwBH,EAAxBG,UAAWC,EAAaJ,EAAbI,SACnCC,GACFC,OAAOJ,EAAcK,QAAQ,IAAK,KAClCD,OAAOH,EAAUI,QAAQ,IAAK,MAC9BD,OAAOJ,EAAcK,QAAQ,IAAK,KACpC,IACF,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAK8B,GACLhC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,SAAI+B,GADN,IAC0BC,EAD1B,KACuCK,KAAKC,OAAOJ,GADnD,MAGApC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMwC,WAAS,EAACC,QAAS,IACtBP,EAAST,IAAIxC,KAAKyD,uDAMdpD,GAAU,IAAAqD,EAAA1D,KACrB,OAAKA,KAAKI,MAAME,aAETD,EACJmC,IAAI,SAAAmB,GAAC,OAAA7D,OAAA8D,EAAA,EAAA9D,CAAA,GACD6D,EADC,CAEJV,SAAUU,EAAEV,SAASY,OACnB,SAAAC,GAAC,OAAIA,EAAEvB,MAAMsB,OAAO,SAAApB,GAAC,OAAIA,GAAKA,EAAEE,KAAKoB,gBAAkBL,EAAKtD,MAAME,cAAgBmC,EAAEC,UAASsB,aAGhGH,OAAO,SAAAF,GAAC,OAAIA,EAAEV,SAASe,SATW3D,wCAYzBA,GACZ,OAAOA,EAAS4D,OAAO,SAACC,EAAKP,GAAN,OAAYO,EAAMP,EAAEV,SAASe,QAAQ,oCAGrD,IAAAG,EAAAnE,KACDoE,EAAWpE,KAAKM,aAAaN,KAAKI,MAAMC,UAC9C,OACES,EAAAC,EAAAC,cAAA,OAAKqD,UAAU,OACbvD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,KACED,EAAAC,EAAAC,cAACuD,EAAAxD,EAAD,CAAYyD,QAAQ,gBAApB,QACA1D,EAAAC,EAAAC,cAACyD,EAAA1D,EAAD,CACA2D,SAAU,SAAAC,GAAC,OAAIR,EAAKvD,SAAS,CAAEN,aAAcqE,EAAEnD,OAAOoD,MAAMb,iBAC5Da,MAAO5E,KAAKI,MAAME,gBALtB,WASaN,KAAK6E,cAAcT,GAThC,OAS+CpE,KAAK6E,cAAc7E,KAAKI,MAAMC,UAC1E+D,EAAS5B,IAAIxC,KAAK8E,cAAcC,KAAK/E,eAtG5BgF,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpF,KAAK,SAAAqF,GACjCA,EAAaC","file":"static/js/main.1da0a54a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./App.css\";\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from '@material-ui/core/InputLabel';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      products: [],\n      filterBySize: \"S\"\n    };\n  }\n  componentWillMount() {\n    const ctx = this;\n    fetch(\n      \"https://raw.githubusercontent.com/keyeh/uniqlo-sale-api/gh-pages/data.json\"\n    )\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(json) {\n        ctx.setState({ products: json });\n      });\n  }\n  renderVariants(variant) {\n    return (\n      <Grid item sm={3} md={2} lg={2}>\n        <a href={variant.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          <Card\n            style={{\n              height: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\"\n            }}\n          >\n            <img\n              style={{ width: \"100%\" }}\n              src={variant.thumbnail}\n              alt={variant.name}\n            />\n            <CardContent style={{ flexGrow: 1 }}>\n              <Typography>{variant.name}</Typography>\n              <Typography>\n                {variant.stock.map(\n                  s => s && s.inStock && <span>{s.size} &bull; </span>\n                )}\n              </Typography>\n            </CardContent>\n            <CardActions>{}</CardActions>\n          </Card>\n        </a>\n      </Grid>\n    );\n  }\n\n  renderProduct(product) {\n    const { title, originalPrice, salePrice, variants } = product;\n    const percentDiscount =\n      ((Number(originalPrice.replace(\"$\", \"\")) -\n        Number(salePrice.replace(\"$\", \"\"))) /\n        Number(originalPrice.replace(\"$\", \"\"))) *\n      100;\n    return (\n      <div>\n        <h2>{title}</h2>\n        <h3>\n          <s>{originalPrice}</s> {salePrice} ({Math.round(-percentDiscount)}%)\n        </h3>\n        <Grid container spacing={16}>\n          {variants.map(this.renderVariants)}\n        </Grid>\n      </div>\n    );\n  }\n\n  filterBySize(products) {\n    if (!this.state.filterBySize) return products;\n\n    return products\n      .map(p => ({\n        ...p,\n        variants: p.variants.filter(\n          v => v.stock.filter(s => s && s.size.toUpperCase() === this.state.filterBySize && s.inStock).length\n        )\n      }))\n      .filter(p => p.variants.length);\n  }\n\n  countVariants(products) {\n    return products.reduce((acc, p) => acc + p.variants.length, 0)\n  }\n\n  render() {\n    const filtered = this.filterBySize(this.state.products);\n    return (\n      <div className=\"App\">\n        <FormControl>\n          <InputLabel htmlFor=\"filterBySize\">Size</InputLabel>\n          <Input\n          onChange={e => this.setState({ filterBySize: e.target.value.toUpperCase() })}\n          value={this.state.filterBySize}\n          />\n        </FormControl>\n        \n          Showing {this.countVariants(filtered)} of {this.countVariants(this.state.products)}\n        {filtered.map(this.renderProduct.bind(this))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}